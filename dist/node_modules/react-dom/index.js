(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3;
	// <div> </div>
	const HostComponent = 5;
	// <div> 123 </div>
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        // 实例
	        this.tag = tag;
	        this.key = key;
	        // HostComponent <div> div DOM
	        this.stateNode = null;
	        // FunctionComponent
	        this.type = null;
	        // 指向父fiberNode
	        this.return = null;
	        // 兄弟节点
	        this.sibling = null;
	        // 孩子节点
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        //副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // </div> type: 'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    // ReturnType<typeof processUpdateQueue<State>> 获取函数返回值的类型
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // baseState 1 update (x) => 4x -> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const key = element.key;
	        work: if (currentFiber !== null) {
	            // update
	            if (currentFiber.key === key) {
	                // key 相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        // type相同
	                        const existing = useFiber(currentFiber, element.props);
	                        existing.return = returnFiber;
	                        return existing;
	                    }
	                    // 删除旧的
	                    deleteChild(returnFiber, currentFiber);
	                    break work;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break work;
	                    }
	                }
	            }
	            else {
	                // 删掉旧的
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        // 根据element创建fiber然后返回
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        if (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                // 类型没变，可以服用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcilerChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // Todo 多节点的情况 ul > li * 3
	        // HostText 文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (currentFiber !== null) {
	            // 兜底删除
	            deleteChild(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        // return fiberNode
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip) {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    // 重置
	    wip.memoizedState = null;
	    const current = wip.alternate;
	    if (current !== null) ;
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    // 重置操作
	    currentlyRenderingFiber = null;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState
	};
	function mountState(initialState) {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber);
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	const beginWork = (wip) => {
	    // 比较,返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork未实现类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Intance
	const createInstance = (type) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;
	function commitUpdate(fiber) {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        default:
	            {
	                console.warn('未实现的Update类型', fiber);
	            }
	            break;
	    }
	}
	function commitTextUpdate(textInstance, content) {
	    textInstance.textContent = content;
	}
	function removeChild(child, container) {
	    container.removeChild(child);
	}

	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	const completeWork = (wip) => {
	    // 递归中的归
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 首屏渲染
	                // 1. 构建dom
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2. 将dom插入到dom树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                // update
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                // 首屏渲染
	                // 1. 构建dom
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completework', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete);
	            });
	        }
	        finishedWork.flags &= ~Update;
	    }
	};
	function commitDeletion(childToDelete) {
	    let rootHostNode = null;
	    // 递归子树
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO 解绑ref
	                return;
	            case HostText:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO 解绑ref
	                return;
	            case FunctionComponent:
	                // TODO useEffect unmount
	                break;
	            default:
	                {
	                    console.warn('未处理的unmount类型', unmountFiber);
	                }
	                break;
	        }
	    });
	    // 移除rootHostNode的DOM
	    if (rootHostNode !== null) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            removeChild(rootHostNode, hostParent);
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	}
	function commitNestedComponent(root, onCommitUnmount) {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            // 向下遍历
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            // 终止条件
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            // 向上归
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	const commitPlacement = (finishedWork) => {
	    // finishedWork ~~ DOM
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // finishedWork ~~ DOM append parent DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // fiber host
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        const sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	        }
	    }
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	function scheduleUpdateOnFiber(fiber) {
	    // TODO 调度功能
	    // fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (error) {
	            {
	                console.warn('workLoop发生错误', error);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip fierNode树 树中的flags
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作
	    // root flags root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node != null);
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDom.createRoot(root).render(<App />)
	function createRoot(container) {
	    // 创建根HTML元素
	    const root = createContainer(container);
	    return {
	        render(element) {
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
